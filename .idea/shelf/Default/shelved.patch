Index: exercises/pyramid/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// --- Directions\n// Write a function that accepts a positive number N.\n// The function should console log a pyramid shape\n// with N levels using the # character.  Make sure the\n// pyramid has spaces on both the left *and* right hand sides\n// --- Examples\n//   pyramid(1)\n//       '#' n\n//   pyramid(2)\n//       ' # '\n//       '###' n + 1\n//   pyramid(3)\n//       '  #  '\n//       ' ### '\n//       '#####' n + 2\n//   pyramid(4)\n//       '   #   '\n//       '  ###  '\n//       ' ##### '\n//       '#######' n + 3\n\n// function pyramid(n) {\n//   const rowLength = n + (n - 1)\n//\n//   for (let row = 0; row < n; row ++) {\n//     let level = \"\"\n//     let spaces = n - (row + 1)\n//\n//     for (let col = 0; col < rowLength; col++) {\n//       if (col < spaces || col >= rowLength - spaces) {\n//         level += \" \"\n//       } else {\n//         level += \"#\"\n//       }\n//     }\n//\n//     console.log(level)\n//   }\n// }\n\nfunction pyramid(n, row = 0, level = \"\") {\n    const rowLength = n + (n - 1)\n    const spaces = n - (row + 1)\n\n    if (row === n) {\n        return\n    }\n\n    if (level.length === rowLength) {\n        console.log(level)\n        return pyramid(n, row + 1)\n    }\n\n    if (level.length < spaces || level.length >= rowLength - spaces) {\n        level += \" \"\n    } else {\n        level += \"#\"\n    }\n    return pyramid(n, row, level)\n}\n\nmodule.exports = pyramid;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- exercises/pyramid/index.js	(date 1520385502000)
+++ exercises/pyramid/index.js	(date 1520539039000)
@@ -19,44 +19,64 @@
 //       ' ##### '
 //       '#######' n + 3
 
+function pyramid(n) {
+    const rowLength = n * 2 - 1;
+    const midpoint = Math.floor((2 * n - 1) / 2)
+
+    for (let row = 0; row < n; row++) {
+        let level = "";
+
+        for (let col = 0; col < rowLength; col++) {
+            if (midpoint - row <= col && midpoint + row >= col) {
+                level += "#"
+            } else {
+                level += " "
+            }
+        }
+
+        console.log(level)
+    }
+}
+
 // function pyramid(n) {
-//   const rowLength = n + (n - 1)
+//     const rowLength = n * 2 - 1;
 //
-//   for (let row = 0; row < n; row ++) {
-//     let level = ""
-//     let spaces = n - (row + 1)
+//     for (let row = 0; row < n; row++) {
+//         let level = "";
+//         let spaces = n - (row + 1);
 //
-//     for (let col = 0; col < rowLength; col++) {
-//       if (col < spaces || col >= rowLength - spaces) {
-//         level += " "
-//       } else {
-//         level += "#"
-//       }
-//     }
+//         for (let col = 0; col < rowLength; col++) {
+//             if (col < spaces || col >= rowLength - spaces) {
+//                 level += " "
+//             } else {
+//                 level += "#"
+//             }
+//         }
 //
-//     console.log(level)
-//   }
+//         console.log(level)
+//     }
 // }
 
-function pyramid(n, row = 0, level = "") {
-    const rowLength = n + (n - 1)
-    const spaces = n - (row + 1)
-
-    if (row === n) {
-        return
-    }
-
-    if (level.length === rowLength) {
-        console.log(level)
-        return pyramid(n, row + 1)
-    }
-
-    if (level.length < spaces || level.length >= rowLength - spaces) {
-        level += " "
-    } else {
-        level += "#"
-    }
-    return pyramid(n, row, level)
-}
+// RECURSIVELY
+// function pyramid(n, row = 0, level = "") {
+//     const rowLength = n + (n - 1)
+//     const spaces = n - (row + 1)
+//
+//     if (row === n) {
+//         return
+//     }
+//
+//     if (level.length === rowLength) {
+//         console.log(level)
+//         return pyramid(n, row + 1)
+//     }
+//
+//     if (level.length < spaces || level.length >= rowLength - spaces) {
+//         level += " "
+//     } else {
+//         level += "#"
+//     }
+//     return pyramid(n, row, level)
+// }
 
 module.exports = pyramid;
